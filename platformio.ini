;PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = build_SAMD
libdeps_dir = /tmp/libdeps

[env]
framework = arduino
build_flags = 
  -include "src/ModbusGateway.h"
  -include "src/ModbusGatewayHardware.h"
  -D MODBUSGATEWAY
  ;-D ItsyBitsyM0
  ; optimize knx stack
  -D SMALL_GROUPOBJECT
  -D USE_BINSEARCH
  ; -D KNX_AUTO_ADAPT
  -D KNX_WAIT_FOR_ADDR
  ;-D Serial_Debug_Modbus_Min  ;Serial Output Modbus 
  ;-D Serial_Debug_Modbus      ;Serial Output Modbus komplett
  -D Serial_Debug_S0          ;Serial Output S0 komplett
  -D Debug_S0_LED             ;Diagnose S0 LED ON/OFF
  -D Serial_Int_output
  -D MASK_VERSION=0x07B0
  ; use flash directly
  ;flash start at 1.5MiB
  -D KNX_FLASH_SIZE=0x4000
  -D KNX_FLASH_OFFSET=0x180000 
  -D USERDATA_SAVE_SIZE=1004
  ; use EEPROM emulation
  ;-D DEBUG_TIMING
  ;-D LOGIC_TRACE
  -Wno-unknown-pragmas 
  -Wno-switch
  ; debug timing in knx stack
monitor_speed = 115200
lib_ldf_mode = deep+
; lib_extra_dirs = 
;   ${PROJECT_DIR}\..
debug_tool = jlink
debug_extra_cmds = 
  set output-radix 16
upload_protocol = jlink

[RP2040]
platform = https://github.com/maxgerhardt/platform-raspberrypi.git
board = pico
; board can use both Arduino cores -- we select Arduino-Pico here
board_build.core = earlephilhower
; board_build.filesystem_size = 0.1m
; platform_packages = 
;   ; framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git#2.3.2
;   framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git

build_flags =
  ${env.build_flags}
  -D SERIAL_DEBUG=Serial
  ; -D USE_RP2040_EEPROM_EMULATION
  ; -D USE_RP2040_LARGE_EEPROM_EMULATION
  -D PIO_FRAMEWORK_ARDUINO_ENABLE_RTTI
  -D LWIP_DONT_PROVIDE_BYTEORDER_FUNCTIONS
  -O0

build_unflags = -Os

; lib_deps = 
  ; adafruit/Adafruit VEML7700 Library @ 2.1.0
;   adafruit/Adafruit SleepyDog Library @ ^1.4.0
; ;   Wire
; ;   SPI
debug_build_flags = -O0 -ggdb3
; debug_build_flags = -ggdb3

[SAMD]
platform = atmelsam
board = zeroUSB
build_flags = 
  ${env.build_flags}
  -D ArduinoZero
  -D SERIAL_DEBUG=SerialUSB
  ; use EEPROM emulation
  ; -D USE_SAMD_EEPROM_EMULATION
  ; -D CRYSTALLESS
  ; -D WATCHDOG
; lib_deps = 
  ; adafruit/Adafruit SleepyDog Library @ 1.4.0
  ; adafruit/Adafruit VEML7700 Library @ 2.1.0
;   Wire
;   SPI

[RP2040_develop]
build_flags =
  -D DEBUG_DELAY=10000
  ; -D BOARD_MASIFI_PICO
  -D BOARD_MASIFI_MODBUS_RP2040
  -D SERIAL_HF=Serial2

[SAMD_develop]
build_flags =
  -D DEBUG_DELAY=10000
  -D BOARD_MASIFI_MODBUS_SAMD



[env:build_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  ${RP2040_develop.build_flags}

[env:build_SAMD]
extends = SAMD
build_type = debug
build_flags =
  ${SAMD.build_flags}
  ${SAMD_develop.build_flags}



[env:upload_USB_RP2040]
extends = RP2040
build_flags = 
  ${RP2040.build_flags} 
  ${RP2040_develop.build_flags}
upload_protocol = picotool

[env:upload_USB_SAMD]
extends = SAMD
build_flags = 
  ${SAMD.build_flags} 
  ${SAMD_develop.build_flags}
upload_protocol = sam-ba

[env:upload_JLINK_RP2040]
extends = RP2040
build_flags = 
  ${RP2040.build_flags} 
  ${RP2040_develop.build_flags}
upload_protocol = jlink

[env:upload_Release_JLINK_RP2040]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_MODBUS_RP2040
  -D SERIAL_HF=Serial2
upload_protocol = jlink

[env:upload_JLINK_SAMD]
extends = SAMD
build_flags = 
  ${SAMD.build_flags} 
  ${SAMD_develop.build_flags}
upload_protocol = jlink

[env:upload_Release_JLINK_SAMD]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_MODBUS_SAMD
upload_protocol = jlink


#### Release Environments
[env:release_SAMD]
extends = SAMD
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_MODBUS_SAMD

[env:release_RP2040_devel]
extends = RP2040
build_flags =
  ${RP2040.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_MASIFI_MODBUS_RP2040
  -D SERIAL_HF=Serial2

### This is an example for enduser compiled environment
[env:enduser]
extends = SAMD
;extends = RP2040
upload_protocol = sam-ba
;upload_protocol = picotool
build_flags =
  ${SAMD.build_flags}
  -D DEBUG_DELAY=100
  -D BOARD_ENDUSER
;  -D BOARD_MASIFI_HFPM_DEVEL
